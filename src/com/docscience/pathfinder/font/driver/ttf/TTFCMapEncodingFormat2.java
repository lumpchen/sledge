package com.docscience.pathfinder.font.driver.ttf;

import java.io.IOException;

/**
 * Format 2: High-byte mapping through table 
 * 
 * <pre>
 * Type           Name               Description
 * ----------------------------------------------------------------------------- 
 * USHORT         format             Format number is set to 2. 
 * USHORT         length             This is the length in bytes of the subtable. 
 * USHORT         language           Please see "Note on the language field in 
 *                                   'cmap' subtables" in this document. 
 * USHORT         subHeaderKeys[256] Array that maps high bytes to subHeaders: 
 *                                   value is subHeader index * 8. 
 * 4 words struct subHeaders[ ]      Variable-length array of subHeader structures. 
 * USHORT         glyphIndexArray[ ] Variable-length array containing subarrays 
 *                                   used for mapping the low byte of 2-byte characters. 
 * </pre>
 * 
 * 
 * A subHeader is structured as follows:
 *  
 * <pre>
 * Type   Name          Description 
 * -----------------------------------------------------------------------------
 * USHORT firstCode     First valid low byte for this subHeader. 
 * USHORT entryCount    Number of valid low bytes for this subHeader.  
 * SHORT  idDelta       See text below. 
 * USHORT idRangeOffset See text below.
 * </pre>
 * 
 * @author wxin
 *
 */
public class TTFCMapEncodingFormat2 extends TTFCMapEncoding {

    /**
     * Generated by Eclipse 
     */
    private static final long serialVersionUID = -8250004160830588770L;

    @Override
	public int getFormat() {
        return CMAP_FORMAT_2;
    }
    
    @Override
	public int getGlyphID(int code) {
    	assert(false) : "not implement yet";
        return 0;
    }

    @Override
	public void read(long offset, TTFRandomReader rd)
            throws TTFFormatException, IOException {
    	assert(false) : "not implement yet";
    }

    @Override
	public int getFirstChar() {
    	assert(false) : "not implement yet";
    	return 0;
    }

    @Override
	public int getLastChar() {
    	assert(false) : "not implement yet";
        return 0;
    }

}
