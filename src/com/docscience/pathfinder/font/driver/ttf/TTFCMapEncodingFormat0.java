package com.docscience.pathfinder.font.driver.ttf;

import java.io.IOException;

/**
 * Format 0: Byte encoding table 
 *
 * This is the Apple standard character to glyph index mapping table. 
 * 
 * <pre>
 * Type    Name               Description
 * ----------------------------------------------------------------------------- 
 * USHORT  format             Format number is set to 0.  
 * USHORT  length             This is the length in bytes of the subtable. 
 * USHORT  language           Please see "Note on the language field in 'cmap' 
 *                            subtables" in this document. 
 * BYTE    glyphIdArray[256]  An array that maps character codes to glyph index 
 *                            values. 
 * </pre>
 * 
 * This is a simple 1 to 1 mapping of character codes to glyph indices. The 
 * glyph set is limited to 256. Note that if this format is used to index into a
 * larger glyph set, only the first 256 glyphs will be accessible. 
 * 
 * 
 * @author wxin
 *
 */
public class TTFCMapEncodingFormat0 extends TTFCMapEncoding {
  
    /**
     * Generated by Eclipse 
     */
    private static final long serialVersionUID = 8270701071544845584L;
    
    private int length;
    private int language;
    private short[] glyphIdArray = new short[256];
    
    @Override
	public int getFormat() {
        return CMAP_FORMAT_0;
    }
    
    public int getLength() {
        return length;
    }
    
    public int getLanguage() {
        return language;
    }
    
    @Override
	public int getGlyphID(int code) {
        code &= 0x0ff;
        return glyphIdArray[code];
    }

    @Override
	public void read(long offset, TTFRandomReader rd)
            throws TTFFormatException, IOException {
        rd.setPosition(offset);
        if (rd.readTTFUShort() != CMAP_FORMAT_0) {
            throw new TTFFormatException("bad cmap encoding format number for format 0", rd.getPosition() - 2);
        }
        length = rd.readTTFUShort();
        language = rd.readTTFUShort();
        for (int i=0; i<glyphIdArray.length; ++i) {
            glyphIdArray[i] = rd.readTTFByte();
        }
    }

    @Override
	public int getFirstChar() {
        return 0;
    }

    @Override
	public int getLastChar() {
        return glyphIdArray.length - 1;
    }

}
